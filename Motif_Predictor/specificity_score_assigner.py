# This script assigns motif specificity scores to detected motifs from protein sequences

import pickle
from general_utils.general_utils import unravel_seqs
from Motif_Predictor.predictor_config import predictor_params

def apply_specificity_scores(protein_seqs_df, motif_cols, predictor_params = predictor_params):
	'''
	Main function for applying specificity scores to identified motif sequences

	Args:
		protein_seqs_df (pd.DataFrame): dataframe of protein sequences scored with conditional matrices
		motif_cols (list): 				list of columns containing motifs found by score_protein_motifs.py
		predictor_params (dict): 		dict of user-defined parameters for the predictive pipeline

	Returns:
		protein_seqs_df (pd.DataFrame): dataframe with added columns for specificity scores
	'''

	# Load the SpecificityMatrix object generated by matrix_generator.py
	specificity_matrix_path = predictor_params["specificity_matrix_path"]
	with open(specificity_matrix_path, "rb") as f:
		specificity_matrix = pickle.load(f)

	# Score the motif sequences
	use_specificity_weighted = predictor_params["use_specificity_weighted"]
	cols = list(protein_seqs_df.columns)
	for motif_col in motif_cols:
		motif_col_index = cols.index(motif_col)
		specificity_score_col = motif_col + "_specificity_score"

		motif_seqs = protein_seqs_df[motif_col].to_numpy()
		motif_length = predictor_params["motif_length"]
		convert_phospho = predictor_params["convert_phospho"]
		motif_seqs_2d = unravel_seqs(motif_seqs, motif_length, convert_phospho)
		specificity_score_values = specificity_matrix.score_motifs(motif_seqs_2d, use_specificity_weighted)

		protein_seqs_df[specificity_score_col] = specificity_score_values
		cols.insert(motif_col_index+2, specificity_score_col)
	protein_seqs_df = protein_seqs_df[cols]

	return protein_seqs_df